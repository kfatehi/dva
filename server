#!/usr/bin/env node
"use strict";
const debug = require('debug')('dva:server');
const express = require('express');
const app = express();
const models = require('./models');
const routes = require('./routes')
const session = require('express-session')
const passport = require('passport');
const Strategy = require('passport-local').Strategy;

app.set('port', process.env.PORT || 3000);

// Configure view engine to render EJS templates.
app.set('views', `${__dirname}/views`);
app.set('view engine', 'ejs');

// Configure the local strategy for use by Passport.
//
// The local strategy require a `verify` function which receives the credentials
// (`email` and `password`) submitted by the user.  The function must verify
// that the password is correct and then invoke `cb` with a user object, which
// will be set at `req.user` in route handlers after authentication.
passport.use(new Strategy(function(email, password, cb) {
  debug('strat', email, password)
  models.User.findOne({ where: { email: email } }).then(function(user) {
    if (err) { return cb(err); }
    if (!user) { return cb(null, false); }
    if (user.password != password) { return cb(null, false); }
    return cb(null, user);
  }).catch(cb)
}));


// Configure Passport authenticated session persistence.
//
// In order to restore authentication state across HTTP requests, Passport needs
// to serialize users into and deserialize users out of the session.  The
// typical implementation of this is as simple as supplying the user ID when
// serializing, and querying the user record by ID from the database when
// deserializing.
passport.serializeUser(function(user, cb) {
  cb(null, user.id);
});

passport.deserializeUser(function(id, cb) {
  models.User.findById(id).then(function(user) {
    if (!user) return cb(new Error("Not found"))
    cb(null, user);
  }).catch(cb)
});

// app.use(express.static('public'));

// https://github.com/expressjs/session
app.use(session({
  resave: false,
  secret: 'loosely-named-a-secret',
  saveUninitialized: false
}));
// use this later to keep dev cycle quick
// https://github.com/darul75/express-session-json

// Initialize Passport and restore authentication state, if any, from the
// session.
app.use(passport.initialize());
app.use(passport.session());

app.use(routes);

models.sequelize.sync().then(function () {
  var server = app.listen(app.get('port'), function() {
    debug(`Express server listening on port ${server.address().port}`);
  });
});

